#!/usr/bin/env bash

mc_port=25566
port=${1:-${PORT:-8080}}

if [ -z "$NGROK_API_TOKEN" ]; then
  echo "You must set the NGROK_API_TOKEN config var to create a TCP tunnel!"
  exit 1
fi

# Start the TCP tunnel
ngrok_cmd="bin/ngrok tcp ${mc_port} --authtoken $NGROK_API_TOKEN ${NGROK_OPTS}"
echo "Starting ngrok..."
eval "$ngrok_cmd &"
ngrok_pid=$!

# Do an inline sync first, then start the background job
echo "Starting sync..."
bin/sync
if [ "$READ_ONLY" != "true" ]; then
  eval "while true; do sleep ${AWS_SYNC_INTERVAL:-60}; bin/sync; done &"
  sync_pid=$!
fi

# create server config
echo "server-port=${mc_port}" >> /app/server.properties
for f in whitelist banned-players banned-ips ops; do
  test ! -f $f.json && echo -n "[]" > $f.json
done

limit=$(ulimit -u)
if [[ $limit -le 256 ]]; then
  heap="384m"  # Eco, Basic, 1X Dyno
elif [[ $limit -le 512 ]]; then
  heap="768m"  # 2X Dyno
elif [[ $limit -le 16384 ]]; then
  heap="2g"    # PM Dyno
else
  heap="4g"    # Default for other Dynos
fi

mc_java_opts=${MC_JAVA_OPTS:-"-Xmx${heap} -Xms${heap}"}

echo "Starting: minecraft ${mc_port}"
eval "screen -L -h 2048 -dmS java -jar fabric-server.jar ${mc_java_opts} nogui"
main_pid=$!

# Flush the logfile every second, and ensure that the logfile exists
screen -X "logfile 1" && sleep 1

echo "Tailing log"
eval "tail -f screenlog.0 &"
tail_pid=$!

trap "kill $ngrok_pid $main_pid $sync_pid $tail_pid" SIGTERM
trap "kill -9 $ngrok_pid $main_pid $sync_pid $tail_pid; exit" SIGKILL

eval "ruby -rwebrick -e'WEBrick::HTTPServer.new(:BindAddress => \"0.0.0.0\", :Port => ${port}, :MimeTypes => {\"rhtml\" => \"text/html\"}, :DocumentRoot => Dir.pwd).start'"
